#! /bin/bash

# Data collection and collation script for the MCE/CCS program
# Written by C. Symonds, 21/04/2015

# This script collects all the data from the different subfolders, calls averaging
# programs to combine this data, then puts all relevant files in a results folder, 
# before deleting the raw data. By commenting out the marked sections of the script
# this raw data can be preserved. This script should be called only by use of the 
# results.sh file, which is automatically written by other scripts (either at the time
# of running, or when partial runs are combined using the combine.sh script) and so
# there should be no need to manually run this script alone unless the results.sh
# script has been deleted/overwritten accidentally.
# The required arguments are:
#   1- The path of the folder in which the raw data exists
#   2- The total number of repeats for the entire simulation
#   3- The number of sub-folders in the raw data folder
#   4- The random number generated by the run.sh script as a unique run identifier
#   5- The name of the results file which calls this script (deleted at the end)

PurgeRaw=0
RESFILE=$5                  # Name of results file             
REPS=$(( $2/$3 ))           # Number of repeats per folder
FOLDERS=$3                  # Number of folders
RUNF=${0%/*}                # Run folder
NUMBER=$4                   # The random number used for unique identification of run
FILE="MCE$NUMBER.sh"        # Name of the job submission script
EXDIR=$1                    # Path of the folder where raw output files exist
out=${EXDIR##*/}            # Folder name of the $EXDIR path

if [[ ! -d "$EXDIR" ]]; then
  echo "Error. Execution folder does not exist."
  echo "Check that you are running the correct instance of the result shell script."
  exit 1
fi

folseq=( `seq 1 1 $FOLDERS` )    # The sequence of sub-folders, saved in an array

# If the SGE job submission system is present, a flag is set (1 if present, else 0)
if [[ ! -z $( command -v qstat ) ]]; then HSTFLG=1; else HSTFLG=0; fi
cd $RUNF
cd ..
OUTF1=$PWD
if [[ -d "SB-TrainTests" ]]; then
  RESDIR="$OUTF1/SB-TrainTests-2/$out-$2-reps-$FOLDERS-parts" # The folder in which results will be put
else
  RESDIR="$OUTF1/$out-$2-reps-$FOLDERS-parts" # The folder in which results will be put
fi

# If the $RESDIR folder exists the user is given the option of overwriting
if [[ ! -d "$RESDIR" ]]; then
  mkdir "$RESDIR"
else
  cd "$RESDIR"
  echo "Output Directory Exists!"
  read -p "Overwrite old data? (Y=Overwrite, N=Exit) " -n 1 -r
  echo    # move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    if [[ "$(ls -A )" ]]; then rm *; fi
  else
    exit 1
  fi
  cd ..
fi

# Data collected sequentially from each sub-folder
for i in "${folseq[@]}"; do
  SUBDIR="$EXDIR/$i-run"
  if [[ ! -d "$SUBDIR" ]]; then
    echo "Error. Expected folder $SUBDIR does not exist"
    exit 1
  else
    cd "$SUBDIR"

    # Main output file  
    if [[ -f normpop.out ]]; then
      cp normpop.out "$RESDIR"/normpop_$i.out
    fi

    # Output of which trajectories have been cloned and when
#    if [[ -f Clonetrack-001.out ]]; then
#      for j in Clonetrack*; do
#        cp $j $RESDIR/${j%.out}_$i.out
#      done
#    fi

    # Basis set files only retained when they have not been propagated    
    grep -i "prop NO" input.dat > /dev/null
    propchk=$?
    if [[ propchk -eq 0 ]]; then
      for p in Outbs-*.out ; do cp $p "$RESDIR"/${p%.out}_$i.out; done
    fi                 

    # These basis set files only exist for AIMC-MCE propagation
#    if [[ -f $SUBDIR/Outbs-001-00000-0.out ]]; then
#      echo "yes"
#      for p in Outbs-*.out ; do cp $p "$RESDIR"/${p%.out}_$i.out; done
#    fi
  
    # Histogram file for the sizes of timesteps for adaptive propagation    
    if [[ -f timehist.out ]]; then
      cp timehist.out "$RESDIR"/timehist_$i.out
      cp timesteps.out "$RESDIR"/timesteps_$i.out
    fi
  
  fi
  cd ..
done

cd "$RESDIR"
cp $SUBDIR/input.dat $SUBDIR/inham.dat $SUBDIR/prop.dat .

# all timesteps concatenated
if [[ -f timehist_1.out ]]; then 
  for i in "${folseq[@]}"; do cat "timesteps_$i.out"; done > timesteps.out
  for i in "${folseq[@]}"; do rm "timesteps_$i.out"; done
  cp $RUNF/timehist.exe .
  ./timehist.exe $FOLDERS $2
  if [[ $? -eq 0 ]]; then
    echo "timehist.exe run correctly"  
    if [[ -f "timehist.exe" ]]; then rm timehist.exe; fi
  else
    echo "timehist.exe did not run correctly"
  fi
fi

# All output files averages (inc. culumative averaging and residuals)
if [[ -f normpop_1.out ]]; then
  cols=$( awk '{print NF}' normpop_1.out | sort -nu | tail -n 1 )
  cp $RUNF/avrgpops.exe .
  ./avrgpops.exe $FOLDERS $2 $cols
  if [[ $? -eq 0 ]]; then
    echo "avrgpops has been run"
    if [[ -f "avrgpops.exe" ]]; then rm avrgpops.exe; fi
  else
    echo "avrgpops did not run correctly with arguements $FOLDERS $2 $cols"
  fi
fi

# Sub-folders removed
if [[ $PurgeRaw -eq 1 ]]; then
  for i in "${folseq[@]}"; do
    SUBDIR="$EXDIR/$i-run"
    if [[ ! -d "$SUBDIR" ]]; then
      echo "Error. Expected folder $SUBDIR does not exist here"
      exit 1
    else
      rm -rf $SUBDIR
    fi
  done
fi

# Gnuplot run (if present) to plot any plotting files made by data processing progs
GPL=1 
if [[ -z $( command -v gnuplot ) ]]; then
  echo "Unable to plot results as gnuplot is missing."
else
  GPL=0
fi
cd "$RESDIR"
if [[ $GPL -eq 0 ]]; then
  for i in *.gpl; do gnuplot $i; done
fi

# Copies the SGE outputs to the results file, then deletes the raw data folder entirely
if [[ $HSTFLG -eq 1 ]]; then
  cd $EXDIR
  for j in $FILE.[oe]*; do cp $j $RESDIR/$j.out; done
fi
cd "$RUNF"
if [[ $PurgeRaw -eq 1 ]]; then rm -rf $EXDIR; fi

# Remove results file and job submission file from run folder
if [[ $PurgeRaw -eq 1 ]]; then if [[ -f "$RESFILE" ]]; then rm $RESFILE; fi; fi
if [[ -f "$FILE" ]]; then rm $FILE; fi 
